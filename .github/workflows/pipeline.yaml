on:
  push:

name: CI/CD Pipeline

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        project:
          - frontend
          - backend
    name: Build ${{ matrix.project }}
    permissions:
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Docker Build
        run: |
          echo "Building Docker image..."
          cd ${{ matrix.project }}
          docker build -t mtg-stats-${{ matrix.project }}:latest .
          echo "Docker image built!"
      - name: Login to ghcr.io
        if: github.ref_name == 'develop' || github.ref_name == 'main'
        run: |
          echo "Logging in to ghcr.io..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          echo "Logged in successfully."
      - name: Push Docker image to ghcr.io (develop)
        if: github.ref_name == 'develop'
        run: |
          echo "Pushing Docker image to ghcr.io..."
          docker tag mtg-stats-${{ matrix.project }}:latest ghcr.io/nevah5/mtg-stats-${{ matrix.project }}:develop
          docker push ghcr.io/nevah5/mtg-stats-${{ matrix.project }}:develop
          echo "Docker image pushed!"
      - name: Push Docker image to ghcr.io (main)
        if: github.ref_name == 'main'
        run: |
          echo "Pushing Docker image to ghcr.io..."
          docker tag mtg-stats-${{ matrix.project }}:latest ghcr.io/nevah5/mtg-stats-${{ matrix.project }}:latest
          docker push ghcr.io/nevah5/mtg-stats-${{ matrix.project }}:latest
          echo "Docker image pushed!"
  deploy:
    name: Deploy
    if: github.ref_name == 'main'
    needs: build
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Setup Wireguard VPN
        run: |
          echo "Setting up Wireguard VPN..."
          sudo apt update
          sudo apt install -y wireguard
          echo "Installed Wireguard VPN!"
      - name: Configure Wireguard VPN
        run: |
          echo "Configuring Wireguard VPN..."
          echo -n "${{ secrets.WIREGUARD_VPN_CONFIG }}" | base64 --decode > wg0.conf
          echo "Connecting VPN Tunnel..."
          sudo wg-quick up ./wg0.conf
          echo "Configured Wireguard VPN!"
      - name: Login to Portainer
        run: |
          echo "Logging in to Portainer..."
          RESPONSE=$(curl -s -k -X POST https://portainer.geeler.net/api/auth \
            -H "Content-Type: application/json" \
            -d '{"username": "${{ secrets.PORTAINER_USER }}", "password": "${{ secrets.PORTAINER_PASSWORD }}"}')
          JWT=$(echo $RESPONSE | jq -r '.jwt')
          echo "JWT=$JWT" >> $GITHUB_ENV
          echo "Logged in successfully."
      - name: Redeploy Stack
        run: |
          echo "Redeploying mtg-stats stack..."
          curl -s -k -X PUT https://portainer.geeler.net/api/stacks/100/git/redeploy?endpointId=3 \
            -H "Authorization: Bearer ${{ env.JWT }}" \
            -H "Content-Type: application/json" \
            -d '{"env":[],"prune":false,"RepositoryReferenceName":"","RepositoryAuthentication":false,"RepositoryUsername":"","RepositoryPassword":"","PullImage":true}'
          echo "Redeployed successfully."
      - name: Smoke Test
        run: |
          echo "Running smoke tests..."
          sleep 10 # adjust as necessary for the service to start
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://nexium.geeler.net:8007)
          if [ "$RESPONSE" -ne 200 ]; then
            echo "Smoke test failed! Response code: $RESPONSE"
            exit 1
          else
            echo "Smoke test passed! Response code: $RESPONSE"
          fi
